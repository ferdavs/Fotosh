import com.android.build.gradle.internal.tasks.AndroidTestTask

// Top-level build file where you can add configuration options common to all sub-projects/modules.
apply from: 'dependencies.gradle'
apply plugin: 'com.github.ben-manes.versions'

buildscript {
    apply from: 'dependencies.gradle'
    repositories {
        jcenter()
        maven { url 'https://plugins.gradle.org/m2/' }
        google()
    }
    dependencies {
        classpath gradlePlugins.android
        classpath gradlePlugins.jacoco
        classpath gradlePlugins.errorProne
        classpath gradlePlugins.versions
        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
    }
}

allprojects {
    repositories {
        jcenter()
        maven { url "https://oss.sonatype.org/content/repositories/snapshots/" }
        google()
    }
    tasks.withType(JavaForkOptions) {
        jvmArgs '-Djava.awt.headless=true'
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

ext.preDexLibs = !project.hasProperty('disablePreDex')

subprojects {
    project.plugins.whenPluginAdded { plugin ->
        if ('com.android.build.gradle.AppPlugin'.equals(plugin.class.name) || 'com.android.build.gradle.LibraryPlugin'.equals(plugin.class.name)) {
            // enable or disable pre-dexing
            project.android.dexOptions.preDexLibraries = rootProject.ext.preDexLibs
        }
    }

    project.plugins.apply('net.ltgt.errorprone')

    configurations.errorprone {
        resolutionStrategy.force "com.google.errorprone:error_prone_core:${versions.errorProneCoreVersion}"
    }

    afterEvaluate {
        def checkTask = tasks.findByName('check')

        checkTask.dependsOn('checkstyle')

        dependencyUpdates.outputDir = new File("${projectDir}/build/reports/versions")

        // Log instrumentation tests results.
        tasks.withType(AndroidTestTask) { task ->
            task.doFirst {
                logging.level = LogLevel.INFO
            }
            task.doLast {
                logging.level = LogLevel.LIFECYCLE
            }
        }
    }
}