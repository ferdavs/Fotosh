apply plugin: 'com.android.application'
apply from: '../code_quality_tools/jacoco.gradle'
apply from: '../code_quality_tools/quality.gradle'

android {
    compileSdkVersion versions.compileSdk
    buildToolsVersion versions.buildTools
    defaultConfig {
        applicationId "com.fer.fotosh"
        minSdkVersion versions.minSdk
        targetSdkVersion versions.targetSdk
        versionCode versions.code
        versionName versions.name
        archivesBaseName = "app-${versions.name}-${versions.code}"

        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    buildTypes {
        debug {
            //Jacoco coverage
            testCoverageEnabled true
        }
        release {
            minifyEnabled true
            proguardFiles files('../proguard').getFiles().toArray()
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

    lintOptions {
        warningsAsErrors true
        abortOnError true
        disable 'GoogleAppIndexingWarning'
        disable 'InvalidPackage'
    }

    testOptions.unitTests.all {
        testLogging {
            events 'passed', 'SKIPPED', 'FAILED', 'standardOut', 'standardError'
            exceptionFormat 'full'
        }
    }
}

dependencies {
    compile fileTree(include: ['*.jar'], dir: 'libs')
    androidTestCompile('com.android.support.test.espresso:espresso-core:2.2.2', {
        exclude group: 'com.android.support', module: 'support-annotations'
    })
    compile libraries.floatingsearchview
    compile libraries.glide
    compile libraries.supportAnnotations
    compile libraries.supportAppCompat
    compile libraries.supportDesign
    compile libraries.supportRecyclerView
    compile libraries.supportCardView
    compile libraries.constraintLayout
    compile libraries.dagger
    annotationProcessor libraries.daggerCompiler
    compile libraries.rxJava
    compile libraries.rxAndroid
    compile libraries.rxLifecycle
    compile libraries.rxLifecycleAndroid
    compile libraries.rxLifecycleComponents
    compile libraries.rxBinding2
    compile libraries.rxBinding2Support
    compile libraries.okHttp
    compile libraries.retrofit
    compile libraries.retrofitGsonConverter
    compile libraries.retrofitRxJavaAdapter
    compile libraries.gson
    compile libraries.guava
    //Do not compile AutoValue dependencies to the app
    annotationProcessor libraries.autoValue
    annotationProcessor libraries.autoValueGson
    annotationProcessor libraries.autoValueParcel
    provided libraries.autoValue
    provided libraries.autoValueGson
    provided libraries.autoValueParcel
    compile libraries.butterKnife
    annotationProcessor libraries.butterKnifeCompiler
    //logger
    compile libraries.timber
    compile libraries.okHttpLoggingInterceptor
    testCompile libraries.junit
    testCompile libraries.assertJ
    testCompile libraries.equalsVerifier
    testCompile libraries.mockitoCore
    testCompile libraries.hamcrest
    testAnnotationProcessor libraries.daggerCompiler
}

configurations.all {

    resolutionStrategy {
        force libraries.supportAnnotations
    }
}

android.applicationVariants.all {
    def aptOutputDir = new File(buildDir, "generated/source/apt/${it.unitTestVariant.dirName}")
    it.unitTestVariant.addJavaSourceFoldersToModel(aptOutputDir)
}